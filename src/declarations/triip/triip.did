type User = record {username: opt text;};
type TravelPlanUpdate = 
 record {
   idtp: text;
   travel_plan: TravelPlanInformation;
 };
type TravelPlanInformation = 
 record {
   activities: opt vec bool;
   created_at: opt int;
   days: opt nat;
   destination: opt text;
   img: opt text;
   join_type: opt nat;
   public_mode: opt bool;
   specific_date: opt bool;
   timeEnd: opt int;
   timeStart: opt int;
 };
type TravelPlan = 
 record {
   travel_plan: TravelPlanInformation;
   uid: principal;
 };
type Result_4 = 
 variant {
   err: Error;
   ok: opt text;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: text;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: opt Profile;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: vec record {
             text;
             TravelPlan;
           };
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type ProofTP = 
 record {
   created_at: opt nat;
   img_key: opt text;
 };
type Profile = record {user: User;};
type Error = 
 variant {
   AlreadyExisting;
   Failed;
   NotAuthorized;
   NotFound;
   SomethingWrong;
 };
service : {
  create: (Profile) -> (Result);
  createProofTP: (text, ProofTP) -> (Result_4);
  createTravelPlan: (TravelPlanUpdate) -> (Result_3);
  read: () -> (Result_2);
  readAllProof: () -> (Result);
  readAllTPUser: () -> (Result_1);
  updateTravelPlan: (TravelPlanUpdate) -> (Result);
}
