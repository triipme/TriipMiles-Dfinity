type User = record {username: opt text;};
type TravelPlanUpdate = 
 record {
   idtp: text;
   travel_plan: TravelPlanInformation;
 };
type TravelPlanInformation = 
 record {
   activities: opt vec bool;
   days: opt nat;
   destination: opt text;
   img: opt text;
   join_type: opt nat;
   public_mode: opt bool;
   specific_date: opt bool;
   timeEnd: opt int;
   timeStart: opt int;
   week_of_year: opt text;
 };
type TravelPlan = 
 record {
   created_at: int;
   is_received: bool;
   travel_plan: TravelPlanInformation;
   uid: principal;
 };
type Result_7 = 
 variant {
   err: Error;
   ok: opt text;
 };
type Result_6 = 
 variant {
   err: Error;
   ok: text;
 };
type Result_5 = 
 variant {
   err: Error;
   ok: vec record {
             text;
             TravelPlan;
             reserved;
           };
 };
type Result_4 = 
 variant {
   err: Error;
   ok: record {
         Profile;
         text;
       };
 };
type Result_3 = 
 variant {
   err: Error;
   ok: vec record {
             text;
             TravelPlan;
           };
 };
type Result_2 = 
 variant {
   err: Error;
   ok: ProofTP;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: Admin;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type ProofTP__1 = record {img_key: opt text;};
type ProofTP = 
 record {
   created_at: int;
   proof: ProofTP__1;
   status: bool;
   uid: principal;
 };
type Profile = 
 record {
   user: User;
   wallets: opt vec text;
 };
type Error = 
 variant {
   AlreadyExisting;
   Enough;
   Failed;
   NotAuthorized;
   NotFound;
   SomethingWrong;
 };
type Admin__1 = 
 record {
   email: opt text;
   first_name: opt text;
   last_name: opt text;
 };
type Admin = record {admin: Admin__1;};
service : {
  addWallet: (text) -> (Result_4);
  create: (Profile) -> (Result);
  createProofTP: (text, ProofTP__1) -> (Result_7);
  createTravelPlan: (TravelPlanUpdate) -> (Result_6);
  getAllTP_admin: () -> (Result_5);
  loginAdmin: () -> (Result_1);
  read: () -> (Result_4);
  readAllProof: () -> (Result);
  readAllTPUser: () -> (Result_3);
  readProofOfTP: (text) -> (Result_2);
  registerAdmin: (text, Admin) -> (Result_1);
  setStatusReceivedICP: (bool, text) -> (Result);
  updateTravelPlan: (TravelPlanUpdate) -> (Result);
}
