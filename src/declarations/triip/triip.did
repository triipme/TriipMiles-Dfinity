type Vetted = 
 record {
   staff: principal;
   updated_at: int;
 };
type User = record {username: opt text;};
type Triip = 
 service {
   accountId: () -> (text) query;
   addWallet: (text) -> (Result_5);
   analysis: () -> (Result_9) query;
   approveHP_admin: (text, text, ProofTP) -> (Result);
   balance: () -> (ICP);
   balanceShared: () -> (ICP);
   create: (Profile) -> (Result);
   createProofTP: (text, ProofTP__1) -> (Result_8);
   createTravelPlan: (TravelPlanUpdate) -> (Result_7);
   getAllTP_admin: () -> (Result_6) query;
   loginAdmin: () -> (Result_2) query;
   read: () -> (Result_5) query;
   readAllProof: () -> (Result);
   readAllTPUser: () -> (Result_4) query;
   readProofOfTP: (text) -> (Result_3);
   registerAdmin: (text, Admin) -> (Result_2);
   setStatusReceivedICP: (bool, text) -> (Result);
   storage: () -> (Result_1) query;
   updateTravelPlan: (TravelPlanUpdate) -> (Result);
 };
type TravelPlanUpdate = 
 record {
   idtp: text;
   travel_plan: TravelPlanInformation;
 };
type TravelPlanInformation = 
 record {
   activities: opt vec bool;
   days: opt nat;
   destination: opt text;
   img: opt text;
   join_type: opt nat;
   public_mode: opt bool;
   specific_date: opt bool;
   timeEnd: opt int;
   timeStart: opt int;
   week_of_year: opt text;
 };
type TravelPlan = 
 record {
   created_at: int;
   is_received: bool;
   travel_plan: TravelPlanInformation;
   uid: principal;
 };
type Result_9 = 
 variant {
   err: Error;
   ok: record {
         Analysis;
         vec text;
       };
 };
type Result_8 = 
 variant {
   err: Error;
   ok: opt text;
 };
type Result_7 = 
 variant {
   err: Error;
   ok: text;
 };
type Result_6 = 
 variant {
   err: Error;
   ok: vec record {
             text;
             TravelPlan;
             opt ProofTP;
             opt Vetted;
             opt text;
           };
 };
type Result_5 = 
 variant {
   err: Error;
   ok: record {
         Profile;
         text;
       };
 };
type Result_4 = 
 variant {
   err: Error;
   ok: vec record {
             text;
             TravelPlan;
             opt ProofTP;
           };
 };
type Result_3 = 
 variant {
   err: Error;
   ok: ProofTP;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: Admin;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: record {
         text;
         text;
         text;
         text;
       };
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type ProofTP__1 = record {img_key: opt text;};
type ProofTP = 
 record {
   created_at: int;
   proof: ProofTP__1;
   status: text;
   uid: principal;
 };
type Profile = 
 record {
   user: User;
   wallets: opt vec text;
 };
type ICP = record {e8s: nat64;};
type Error = 
 variant {
   AlreadyExisting;
   Enough;
   Failed;
   NotAuthorized;
   NotFound;
   SomethingWrong;
 };
type Analysis = 
 record {
   profiles: nat;
   proofs_approved: nat;
   proofs_rejected: nat;
   travelplans: nat;
 };
type Admin__1 = 
 record {
   email: opt text;
   first_name: opt text;
   last_name: opt text;
 };
type Admin = record {admin: Admin__1;};
service : () -> Triip
